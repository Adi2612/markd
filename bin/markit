#!/usr/bin/env node
const express = require('express')
const path = require('path')
const logger = require('morgan')
const bodyParser = require('body-parser')
const debug = require('debug')('markit:server')
const http = require('http')
// const favicon = require('serve-favicon')
require('dotenv').config()

const app = express()

app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))
app.use(logger('dev'))
// app.use(favicon(path.join(__dirname, 'static', 'favicon.ico')))

app.use(express.static(path.join(__dirname, '..', 'dist')))
app.use(express.static(path.join(__dirname, '..', 'static')))

app.set('views', path.join(__dirname, '..', 'views'))
app.set('view engine', 'pug')

// not found error
app.use((req, res, next) => {
  const err = new Error('Not Found')
  err.status = 404
  next(err)
})

// noinspection JSUnusedLocalSymbols
app.use((err, req, res, next) => {
  res.locals.message = err.message
  res.locals.error = req.app.get('env') === 'development' ? err : {}

  res.status(err.status || 500)
  res.render('error')
})

const port = normalizePort(process.env.PORT || '8000')
app.set('port', port)

const server = http.createServer(app)

console.log('Listening on port', port)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort (val) {
  const normalisedPort = parseInt(val, 10)

  if (isNaN(normalisedPort)) {
    return val
  }

  if (normalisedPort >= 0) {
    return normalisedPort
  }

  return false
}

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  if (error.code === 'EACCES') {
    console.error(`${bind} requires elevated privileges`)
    process.exit(1)
  } else if (error.code === 'EADDRINUSE') {
    console.error(`${bind} is already in use`)
    process.exit(1)
  } else { throw error }
}

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  debug(`Listening on ${bind}`)
}
